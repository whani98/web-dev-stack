--정답! 1. 직급이 대리이면서 ASIA 지역에서 근무하는 직원들의 사번, 직원명, 직급명, 부서명, 근무지역, 급여 조회
SELECT EMP_ID, EMP_NAME, JOB_CODE, DEPT_CODE, SALARY FROM EMPLOYEE;
SELECT JOB_CODE, JOB_NAME FROM JOB;
SELECT DEPT_ID, DEPT_TITLE, LOCATION_ID FROM DEPARTMENT;
SELECT LOCAL_CODE, LOCAL_NAME FROM LOCATION;

SELECT EMP_ID 사번, EMP_NAME 직원명, JOB_NAME 직급명, DEPT_TITLE 부서명, LOCAL_NAME 근무지역, SALARY 급여
FROM EMPLOYEE
     JOIN JOB USING(JOB_CODE)
     JOIN DEPARTMENT ON(DEPT_ID = DEPT_CODE)
     JOIN LOCATION ON(LOCAL_CODE = LOCATION_ID)
WHERE LOCAL_NAME LIKE 'ASIA%' AND JOB_NAME = '대리';


--정답! 2. 70년대생 이면서 여자이고, 성이 전씨인 직원들의 직원명, 주민번호, 부서명, 직급명 조회
SELECT EMP_NO , EMP_NAME, DEPT_CODE, JOB_CODE FROM EMPLOYEE;
SELECT DEPT_ID, DEPT_TITLE FROM DEPARTMENT; 
SELECT JOB_CODE, JOB_NAME FROM JOB;

SELECT EMP_NAME 직원명, EMP_NO 주민번호, DEPT_TITLE 부서명, JOB_NAME 직급명
FROM EMPLOYEE 
    JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    JOIN JOB USING (JOB_CODE)
WHERE EMP_NO LIKE '7%' AND EMP_NO LIKE '%-2%' AND EMP_NAME LIKE '전%';
--WHERE EMP_NO LIKE '7____-2%' 도 가능

--정답! 3. 보너스를 받는 직원들의 직원명, 보너스, 연봉, 부서명, 근무지역 조회 (단, 부서 배치 안된 사원들도 출력)
SELECT LOCAL_CODE, LOCAL_NAME FROM LOCATION;
SELECT LOCATION_ID FROM DEPARTMENT;

SELECT EMP_NAME 직원명, BONUS 보너스, SALARY*12 연봉, DEPT_TITLE 부서명, LOCAL_NAME 근무지역
FROM EMPLOYEE
  LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
  LEFT JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID)
WHERE BONUS IS NOT NULL;


--정답! 4. 각 부서별 평균 급여를 조회하여 부서명, 평균 급여 조회 
--(단, 부서 배치 안된 사원들의 평균도 같이)
SELECT NVL(DEPT_TITLE,'부서없음') 부서명, ROUND(AVG(SALARY)) 평균급여
FROM EMPLOYEE
   LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE;


--정답! 5. 각 부서별 총 급여의 합이 1000만원 이상인 부서명, 급여의 합 조회
SELECT DEPT_TITLE 부서명, SUM(SALARY) 급여합
FROM EMPLOYEE
     JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY)>=10000000;


--정답! 6. 사번, 직원명, 직급명, 급여 등급, 구분 조회
-- 이때 구분은 급여 등급이 S1, S2인 경우 '고급', S3, S4인 경우 '중급', S5, S6인 경우 '초급'
SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY FROM EMPLOYEE;
SELECT JOB_CODE, JOB_NAME FROM JOB;
SELECT SAL_LEVEL, MIN_SAL, MAX_SAL FROM SAL_GRADE;

SELECT EMP_ID 사번, EMP_NAME 직원명, JOB_NAME 직급명,
       DECODE (SAL_LEVEL, 'S1','고급', 'S2', '고급', 'S3', '중급', 'S4', '중급', '초급' ) 급여등급
    --CASE WHEN SAL_LAVEL IN ('S1', 'S2') THEN '고급'
         --WHEN SAL_LEVEL IN ('S3', 'S4') THEM '중급'
         --WHEN SAL_LEVEL IN ('S5', 'S6') THEM '초급'
    --END 도 가능!
FROM EMPLOYEE
  JOIN JOB USING (JOB_CODE)
  JOIN SAL_GRADE ON (SALARY BETWEEN MIN_SAL AND MAX_SAL)
ORDER BY SAL_LEVEL, JOB_CODE;


--정답! 7. 보너스를 받지 않는 직원들 중 직급 코드가 J4 또는 J7인 직원들의 직원명, 직급명, 급여 조회
SELECT BONUS, JOB_CODE, EMP_NAME, SALARY FROM EMPLOYEE;
SELECT JOB_CODE, JOB_NAME FROM JOB;

SELECT JOB_CODE 직급코드, EMP_NAME 직원명, JOB_NAME 직급명, SALARY 급여
FROM EMPLOYEE 
    JOIN JOB USING (JOB_CODE)
WHERE JOB_CODE = 'J4' OR JOB_CODE = 'J7' AND BONUS IS NULL
--WHERE BONUS IS NULL AND JOB_CODE IN ('J4', 'J7') 도 가능!
ORDER BY JOB_CODE;


-- *8. 부서가 있는 직원들의 직원명, 직급명, 부서명, 근무 지역 조회
SELECT DEPT_CODE, EMP_NAME, JOB_CODE FROM EMPLOYEE;
SELECT JOB_CODE, JOB_NAME FROM JOB;
SELECT DEPT_ID, DEPT_TITLE, LOCATION_ID FROM DEPARTMENT;
SELECT LOCAL_CODE, LOCAL_NAME FROM LOCATION;

SELECT EMP_NAME 직원명, JOB_NAME 직급명, DEPT_TITLE 부서명, LOCAL_NAME 근무지역
FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
    LEFT JOIN JOB USING (JOB_CODE)
    LEFT JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
WHERE DEPT_CODE IS NOT NULL; 


--정답! 9. 해외영업팀에 근무하는 직원들의 직원명, 직급명, 부서코드, 부서명 조회
SELECT EMP_NAME, JOB_CODE FROM EMPLOYEE;
SELECT * FROM JOB;
SELECT * FROM DEPARTMENT;

SELECT EMP_NAME 직원명, JOB_NAME 직급명, DEPT_CODE 부서코드, DEPT_TITLE 부서명
FROM EMPLOYEE 
    JOIN JOB USING (JOB_CODE)
    JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE DEPT_TITLE LIKE '해외영업%'
--WHERE DEPT_TITLE = '해외영업1부' OR DEPT_TITLE = '해외영업2부' 
--WHERE DEPT_TITLE IN ('해외영업1부', '해외영업2부')
ORDER BY DEPT_TITLE;


--정답! 10. 이름에 '형'자가 들어있는 직원들의 사번, 직원명, 직급명 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME 
FROM EMPLOYEE
    JOIN JOB USING (JOB_CODE)
WHERE EMP_NAME LIKE '%형%';


-- 테이블 : USER_INFO, REVIEW, MOVIE, ACTOR, MOVIE_ACTOR
-- 11. 영화 제목, 감독, 출연한 배우 조회
SELECT MOVIE_ID, TITLE, DIRECTOR FROM MOVIE;
SELECT ACTOR_ID, NAME FROM ACTOR;
SELECT MOVIE_ID, ACTOR_ID FROM MOVIE_ACTOR;

SELECT TITLE 영화제목, DIRECTOR 감독, NAME 출연배우 
FROM MOVIE
    JOIN MOVIE_ACTOR USING (MOVIE_ID)
    JOIN ACTOR USING (ACTOR_ID);
    --또는
SELECT TITLE 영화제목, DIRECTOR 감독, NAME 출연배우 
FROM MOVIE_ACTOR
    JOIN  MOVIE USING (MOVIE_ID)
    JOIN ACTOR USING(ACTOR_ID);    
    
    
--정답! 12. 평점이 3점 이상인 리뷰 영화 제목과 사용자 이름, 평점 조회
SELECT USER_ID, MOVIE_ID, RATING FROM REVIEW;
SELECT USER_ID, NAME FROM USER_INFO;
SELECT MOVIE_ID, TITLE FROM MOVIE;

SELECT TITLE 영화제목, NAME 이름, RATING 평점
FROM REVIEW 
    JOIN USER_INFO USING (USER_ID)
    JOIN MOVIE USING (MOVIE_ID)
WHERE RATING >= 3;


-- 13. 사용자별 리뷰 수 조회
SELECT USER_ID, RATING FROM REVIEW;
SELECT USER_ID, NAME FROM USER_INFO;

SELECT NAME 사용자, COUNT(RATING) "리뷰 수"
--SELECT USER_ID, COUNT(*)도 가능
FROM USER_INFO
    JOIN REVIEW USING (USER_ID)
GROUP BY NAME;
--또는 
SELECT NAME 사용자, COUNT(RATING) "리뷰 수"
FROM REVIEW
    JOIN USER_INFO USING (USER_ID)
GROUP BY NAME;


-- 14. 봉준호 감독의 영화에 출연한 배우 조회
SELECT MOVIE_ID, DIRECTOR FROM MOVIE;
SELECT MOVIE_ID, ACTOR_ID FROM MOVIE_ACTOR;
SELECT ACTOR_ID, NAME FROM ACTOR;

SELECT NAME 출연배우, TITLE 출연작
FROM MOVIE_ACTOR
   JOIN ACTOR USING (ACTOR_ID)
   JOIN MOVIE USING (MOVIE_ID)
WHERE DIRECTOR='봉준호';
--다른 것
SELECT DISTINCT NAME
FROM MOVIE_ACTOR
   JOIN ACTOR USING (ACTOR_ID)
   JOIN MOVIE USING (MOVIE_ID)
WHERE DIRECTOR='최동훈';

--정답! 15. 하정우가 출연한 영화 제목과 평균 평점 조회
SELECT MOVIE_ID, RATING FROM REVIEW;
SELECT ACTOR_ID, NAME FROM ACTOR;
SELECT MOVIE_ID, ACTOR_ID  FROM MOVIE_ACTOR;
SELECT MOVIE_ID, TITLE FROM MOVIE;

--하정우가 출연한 영화제목
SELECT MOVIE_ID, NAME, TITLE --9, 15, 37, 38, 43, 45
FROM MOVIE 
   JOIN MOVIE_ACTOR  USING (MOVIE_ID)
   JOIN ACTOR  USING (ACTOR_ID)
WHERE NAME='하정우';
--영화 평균 평점
SELECT AVG(RATING)
FROM REVIEW
GROUP BY MOVIE_ID;
--앞의 둘을 합하면
SELECT TITLE 영화제목, AVG(RATING) "평점 평균"
FROM MOVIE
   JOIN MOVIE_ACTOR  USING (MOVIE_ID)
   JOIN ACTOR  USING (ACTOR_ID)
   JOIN REVIEW USING (MOVIE_ID)
WHERE NAME='하정우'
GROUP BY TITLE;


-- 정답! 16. MBTI별 평균 평점 조회
SELECT MBTI, ROUND(AVG(RATING), 1) 평균평점
FROM USER_INFO
  LEFT JOIN REVIEW USING (USER_ID)
WHERE MBTI IS NOT NULL
GROUP BY MBTI; 
--정답
SELECT MBTI, ROUND(AVG(RATING), 1) 평균평점
FROM REVIEW
  LEFT JOIN USER_INFO USING (USER_ID)
  GROUP BY MBTI;

-- ***17. 각 영화별 리뷰 수와 평균 평점 조회 (리뷰 수가 1건이라도 있는 경우부터)
SELECT * FROM MOVIE;

SELECT TITLE, COUNT("COMMENT"), AVG(RATING)
FROM REVIEW 
   JOIN MOVIE USING(MOVIE_ID)
GROUP BY TITLE 
HAVING COUNT("COMMENT") >=1 ;


-- ***18. 각 배우가 출연한 영화 수 조회 (단, 3편 이상인 배우만)
SELECT ACTOR_ID, NAME FROM ACTOR;
SELECT MOVIE_ID, ACTOR_ID FROM MOVIE_ACTOR;
SELECT MOVIE_ID, TITLE FROM MOVIE;

SELECT NAME, COUNT(MOVIE_ID)
FROM MOVIE_ACTOR
    JOIN MOVIE USING(MOVIE_ID)
    JOIN ACTOR USING(ACTOR_ID)
GROUP BY NAME
HAVING COUNT(MOVIE_ID)>=3;

-------------------------------------------------------------------------------
-- 1. 국제시장을 감독한 감독의 다른 영화 조회
SELECT * FROM MOVIE;

SELECT DISTINCT DIRECTOR
FROM MOVIE
WHERE TITLE = '국제시장'; --윤제균

SELECT DISTINCT TITLE
FROM MOVIE
WHERE DIRECTOR = (SELECT DISTINCT DIRECTOR
                  FROM MOVIE
                  WHERE TITLE = '국제시장')
      AND TITLE != '국제시장'; --해운대, 영웅


--2. 서울에 사는 사용자들이 리뷰를 남긴 영화 조회
SELECT DISTINCT USER_ID, ADDRESS, TITLE, "COMMENT"
FROM REVIEW 
     JOIN USER_INFO USING (USER_ID)
     JOIN MOVIE USING (MOVIE_ID)
WHERE ADDRESS LIKE '서울%'; --서울사는 사용자들의 리뷰

SELECT TITLE 
FROM (SELECT DISTINCT USER_ID, ADDRESS, TITLE, "COMMENT"
      FROM REVIEW 
           JOIN USER_INFO USING (USER_ID)
           JOIN MOVIE USING (MOVIE_ID)
WHERE ADDRESS LIKE '서울%');


--3. 봉준호 감독 영화 중 평균 평점이 3.0인 영화 조회
SELECT DISTINCT TITLE
FROM MOVIE
     JOIN REVIEW USING (MOVIE_ID)
WHERE DIRECTOR = '봉준호'
GROUP BY TITLE
HAVING AVG(RATING) >= 3.0; --기생충


-- 4. 가장 리뷰 수가 많은 영화 조회
SELECT TITLE, COUNT("COMMENT")
FROM REVIEW
     JOIN MOVIE USING (MOVIE_ID)
GROUP BY TITLE
ORDER BY COUNT("COMMENT") DESC; --영화이름과 리뷰 수많은 순 정렬
     
SELECT TITLE
FROM (SELECT TITLE, COUNT("COMMENT")
FROM REVIEW
     JOIN MOVIE USING (MOVIE_ID)
GROUP BY TITLE
ORDER BY COUNT("COMMENT") DESC)
WHERE ROWNUM = 1; --리뷰 수 1위 영화


-- 5. 전체 리뷰 평균 평점보다 높은 순으로 3위까지 영화 조회
SELECT AVG(RATING)
FROM REVIEW; --전체 리뷰 평균 평점

SELECT TITLE, AVG(RATING)
FROM REVIEW
    JOIN MOVIE USING (MOVIE_ID)
GROUP BY TITLE
HAVING AVG(RATING) > (SELECT AVG(RATING)
                      FROM REVIEW)
ORDER BY AVG(RATING) DESC; --평균 평점 높은 순으로 나열

SELECT TITLE
FROM (SELECT TITLE, AVG(RATING) 
      FROM REVIEW
           JOIN MOVIE USING (MOVIE_ID)
      GROUP BY TITLE
      HAVING AVG(RATING) > (SELECT AVG(RATING)
                            FROM REVIEW)
      ORDER BY AVG(RATING) DESC)
WHERE ROWNUM <= 3;